<pre class="metadata">
Title: Contact Picker API
Shortname: contact-picker
Level: 1
Status: UD
Group: wicg
URL: https://beverloo.github.io/contact-api/spec
Editor: Peter Beverloo, Google, beverloo@google.com
Editor: Rayan Kanso, Google, rayankans@google.com
Abstract: An API to give one-off access to a user's contact information with full control over the shared data.
Markup Shorthands: css no, markdown yes
Indent: 2
</pre>

<pre class=link-defaults>
spec:infra; type:dfn; text:list
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; for:/; text:origin
</pre>

# Introduction # {#intro}

Contact pickers are frequently seen in native mobile applications for a variety of use cases, and
in various desktop applications such as e-mail clients and calendars.

This specification provides an API to bring contact pickers to the web. The API is designed to be
privacy-sensitive, and to give the user control over the shared data.

TODO: Describe differences with other implementations in terms of contact access.

## Use cases ## {#use-cases}

* Social networks could use contact information to bootstrap a user's social graph.
* An e-mail application could allow the user to select the recipients for a message without needing
  their own address book.

## Example ## {#example}

<div class="example">
  Requesting contacts as a result of a user click.

  <pre class="lang-js">
    selectRecipientsButton.addEventListener('click', async () => {
      const contacts = await navigator.contacts.select({
          properties: ['name', 'email'],
          multiple: true,
      });

      if (!contacts.length) {
        // Either no contacts were selected in the picker, or the picker could
        // not be launched. Exposure of the API implies expected availability.
        return;
      }

      // Use the names and e-mail addresses in |contacts| to populate the
      // recipients field in the website's UI.
      populateRecipients(contacts);
    });
  </pre>

  In the above example `selectRecipientsButton` is an HTMLButtonElement, and `populateRecipients`
  is a developer-defined function.
</div>

# Privacy Considerations # {#privacy}

Exposing contact information has a clear privacy impact, in terms of exposing PII of uninvolved
parties. A picker model is enforced so that the user agent can offer a user experience that makes
it clear what information is going to be shared with the website.

The following constraints are also enforced:
* The API is only available in a [=top-level browsing context=] which must also be a
  [=secure context=]. These restrictions ensure that the provided contact information reaches its
  intended recipient.
* A user gesture is needed to initiate the API, to disallow programmatic requests to the user's
  contacts.

# API Description # {#api}

## Extensions to {{Navigator}} ## {#extensions-to-navigator}

<script type="idl">
[Exposed=(Window,SecureContext)]
partial interface Navigator {
    readonly attribute ContactsManager contacts;
};
</script>

## {{ContactsManager}} ## {#contacts-manager}

<script type="idl">
dictionary ContactInfo {
    sequence<USVString> name;
    sequence<USVString> email;
    sequence<USVString> tel;
};

enum ContactProperty { "email", "name", "tel" };

dictionary ContactsSelectOptions {
    required sequence<ContactProperty> properties;
    boolean multiple = false;
};

[Exposed=(Window,SecureContext)]
interface ContactsManager {
    Promise<sequence<ContactInfo>> select(ContactsSelectOptions options);
};
</script>

<div dfn-for="ContactsManager">

### {{ContactsManager/select()}} ### {#contacts-manager-select}

<div algorithm>
  The <dfn method>select(|options|)</dfn> method, when invoked, runs these steps:

  1. Let |promise| be a new {{Promise}}.
  1. Let |selectQueue| be a new [=parallel queue=].
  1. If the [=browsing context=] is not the [=top-level browsing context=], then return
     [=a promise rejected with=] an {{InvalidStateError}} {{DOMException}}.
  1. If the algorithm is not [=triggered by user activation=] then return
     [=a promise rejected with=] a {{SecurityError}} {{DOMException}}.
  1. [=Enqueue the following steps=] to |selectQueue|:
    1. [=Launch=] a new [=contact picker=] with |options|. If this fails, then reject |promise| with an
       {{InvalidStateError}} {{DOMException}} and abort these steps.
    1. Wait for [=contact picker=]'s [=selecting flag=] to be unset.
    1. Resolve promise with [=contact picker=]'s [=selected contacts=]. 
  1. Return |promise|.
</div>

# Contact Picker # {#contact-picker}

A <dfn>contact picker</dfn> instance consists of:
* A <dfn>selecting flag</dfn>, initially set. 
* <dfn>Selected contacts</dfn> (a [=list=] of {{ContactInfo}}s), initially empty.

<div dfn-for="contact picker">

<div algorithm>
  A contact picker MUST be initiated with |options|, an instance of {{ContactsSelectOptions}}.

  To <dfn>launch</dfn> a contact picker, the user agent MUST present a user interface that follows
  these rules:

  * The UI MUST prominently display the [=browsing context=]'s [=origin=].
  * The UI MUST make it clear which `properties` of the contact will be shared.
  * The UI MUST provide a way to select individual contacts. If |options|' `multiple` member is
    false, only one contact should be pickable.
  * The UI MUST provide an option to cancel/return without sharing any contacts, in which case
    [=abort contact picker=].
  * The UI MUST provide an a way for users to indicate that they are done selecting, in which case
    [=complete contact picker=].
</div>

## [=Abort contact picker=] ## {#abort-contact-picker-algorithm}

<div algorithm>
  To <dfn>abort contact picker</dfn>, run the following step:
  1. Unset [=selecting flag=].
</div>

## [=Complete contact picker=] ## {#complete-contact-picker-algorithm}

<div algorithm>
  To <dfn>complete contact picker</dfn>, run the following steps:
  1. [=list/For each=] |contact| of the user's chosen contacts:
    1. Let |contactInfo| be a new {{ContactInfo}}.
    1. TODO: convert |contact| to an instance of {{ContactInfo}}.
    1. Append |contactInfo| to [=selected contacts=].
  1. Unset [=selecting flag=]. 
</div>

</div>

<pre class="metadata">
Title: Contact Picker API
Shortname: contact-picker
Level: 1
Status: UD
Group: wicg
URL: https://beverloo.github.io/contact-api/spec
Editor: Peter Beverloo, Google, beverloo@google.com
Editor: Rayan Kanso, Google, rayankans@google.com
Abstract: An API to give one-off access to a user's contact information with full control over the shared data.
Markup Shorthands: css no, markdown yes
Indent: 2
</pre>

<pre class=link-defaults>
spec:infra; type:dfn; text:list
spec:infra; type:dfn; for:list; text:contains
spec:infra; type:dfn; for:list; text:remove
spec:infra; type:dfn; for:list; text:size
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; for:/; text:origin
</pre>

# Introduction # {#intro}

Contact pickers are frequently seen in native mobile applications for a variety of use cases, and
in various desktop applications such as e-mail clients and calendars.

This specification provides an API to bring contact pickers to the web. The contact picker model
was chosen to give full control to users over the shared data, allowing users to choose exactly
which contacts to provide to the website. The contact picker model also gives websites one-off
access to a user's contacts, meaning developers have to request access to the user's contacts every
time they need it.

## Use cases ## {#use-cases}

* Social networks could use contact information to bootstrap a user's social graph.
* An e-mail application could allow the user to select the recipients for a message without needing
  their own address book.

## Example ## {#example}

<div class="example">
  Requesting contacts as a result of a user click.

  <pre class="lang-js">
    selectRecipientsButton.addEventListener('click', async () => {
      const contacts = await navigator.contacts.select({
          properties: ['name', 'email'],
          multiple: true,
      });

      if (!contacts.length) {
        // Either no contacts were selected in the picker, or the picker could
        // not be launched. Exposure of the API implies expected availability.
        return;
      }

      // Use the names and e-mail addresses in |contacts| to populate the
      // recipients field in the website's UI.
      populateRecipients(contacts);
    });
  </pre>

  In the above example `selectRecipientsButton` is a {{HTMLButtonElement}}, and `populateRecipients`
  is a developer-defined function.
</div>

# Privacy Considerations # {#privacy}

Exposing contact information has a clear privacy impact, in terms of exposing PII of uninvolved
parties. A picker model is enforced so that the user agent can offer a user experience that makes
it clear what information is going to be shared with the website and when.

The following constraints are also enforced:
* The API is only available in a [=top-level browsing context=] which must also be a
  [=secure context=]. These restrictions ensure that the provided contact information reaches its
  intended recipient.
* A user gesture is needed to initiate the API, to disallow programmatic requests to the user's
  contacts.

# API Description # {#api}

## Extensions to {{Navigator}} ## {#extensions-to-navigator}

<script type="idl">
[Exposed=(Window,SecureContext)]
partial interface Navigator {
    readonly attribute ContactsManager contacts;
};
</script>

## {{ContactsManager}} ## {#contacts-manager}

<script type="idl">
dictionary ContactInfo {
    sequence<USVString> name;
    sequence<USVString> email;
    sequence<USVString> tel;
};

enum ContactProperty { "email", "name", "tel" };

dictionary ContactsSelectOptions {
    required sequence<ContactProperty> properties;
    boolean multiple = false;
};

[Exposed=(Window,SecureContext)]
interface ContactsManager {
    Promise<sequence<ContactInfo>> select(ContactsSelectOptions options);
};
</script>

<div dfn-for="ContactsManager">

### {{ContactsManager/select()}} ### {#contacts-manager-select}

<div algorithm>
  The <dfn method>select(|options|)</dfn> method, when invoked, runs these steps:

  1. Let |promise| be a new {{Promise}}.
  1. Let |selectQueue| be a new [=parallel queue=].
  1. If the [=browsing context=] is not the [=top-level browsing context=], then return
     [=a promise rejected with=] an {{InvalidStateError}} {{DOMException}}.
  1. If the algorithm is not [=triggered by user activation=] then return
     [=a promise rejected with=] a {{SecurityError}} {{DOMException}}.
  1. [=Enqueue the following steps=] to |selectQueue|:
    1. [=Launch=] a new [=contact picker=] with [=select options=] set to |options|. If this fails,
       then reject |promise| with an {{InvalidStateError}} {{DOMException}} and abort these steps.
    1. Wait for [=contact picker=]'s [=contacts selected flag=] to be set.
    1. Resolve promise with [=contact picker=]'s [=selected contacts=]. 
  1. Return |promise|.
</div>

# Contact Picker # {#contact-picker}

A <dfn>contact picker</dfn> instance consists of:
* A <dfn>contacts selected flag</dfn>, initially unset. 
* <dfn>Selected contacts</dfn> (a [=list=] of {{ContactInfo}}s), initially empty.
* <dfn>Select options</dfn> (a {{ContactsSelectOptions}}), initially null.

<div dfn-for="contact picker">

<div algorithm>
  To <dfn>launch</dfn> a contact picker, the user agent MUST present a user interface that follows
  these rules:

  * The UI MUST prominently display the [=browsing context=]'s [=origin=].
  * The UI MUST make it clear which `properties` of the contact will be shared.
  * The UI MUST provide a way to select individual contacts. If [=select options=]' `multiple` member
    is false, only one contact should be pickable.
  * The UI MUST provide an option to cancel/return without sharing any contacts, in which case set
    [=contacts selected flag=].
  * The UI MUST provide an a way for users to indicate that they are done selecting, in which case
    [=complete contact picker=].
</div>

## [=Complete contact picker=] ## {#complete-contact-picker-algorithm}

<div algorithm>
  To <dfn>complete contact picker</dfn>, run the following steps:
  1. [=list/For each=] |selectedContact| of the user's chosen contacts:
    1. Let |contactInfo| be a new {{ContactInfo}}.
    1. If [=select options=]' `property` member [=contains=] \``name`\`, then:
      1. Append all name data in |selectedContact| to |contactInfo|'s `name` member.
    1. If [=select options=]' `property` member [=contains=] \``email`\`, then:
      1. Append all email data in |selectedContact| to |contactInfo|'s `email` member.
    1. If [=select options=]' `property` member [=contains=] \``tel`\`, then:
      1. Append all telephone data in |selectedContact| to |contactInfo|'s `tel` member.
    1. Append |contactInfo| to [=selected contacts=].
  1. If [=select options=]' `multiple` member is false, and [=selected contacts=]' [=size=] is
     greater than 1, then [=remove=] all items not equal to [=selected contacts=]`[0]`.
  1. Set [=contacts selected flag=]. 

  TODO: Add more details about shared contact info.
</div>

</div>
